//Copyright (C) 2022, Advanced Micro Devices, Inc. All rights reserved.
//SPDX-License-Identifier: MIT

/********************************************* Disclaimer *********************************************/
/* This file is generated by aiecompiler 2022.1. */
/* Changes to this file may cause incorrect behavior and will be lost if aiecompiler is invoked again.*/

#include <iostream>
#include "adf/adf_api/AIEControlConfig.h"
#include "/media/danieleb/DATA/2022.1/Vitis_Libraries/dsp/L1/include/aie/fir_decimate_asym.hpp"


/************************** Graph Configurations  *****************************/

  adf::GraphConfig GraphConfigurations[] = {
  //{id, name, graphLoadElfFunc, graphInitFunc, graphDebugHalt, coreColumns, coreRows, iterMemColumns, iterMemRows, iterMemAddrs, triggered, plKernelInstanceNames, plAxiLiteModes, plDriverStartFuncs, plDriverCheckIPDoneFuncs}
    {0, "filter", nullptr, nullptr, nullptr, {24}, {0}, {24}, {1}, {0x2d24}, {0}, {}, {}, {}, {},  }, 
  };
  const int NUM_GRAPH = 1;

/************************** PLIO Configurations  *****************************/

  adf::PLIOConfig PLIOConfigurations[] = {
  //{id, name, loginal_name, shim_column, slaveOrMaster, streamId}
    {0, "pl128_in", "DataIn1", 24, 0, 0},
    {1, "pl128_out", "DataOut1", 24, 1, 0},
  };
  const int NUM_PLIO = 2;


/************************** ADF API initializer *****************************/

  class InitializeAIEControlXRT
  {
  public:
    InitializeAIEControlXRT()
    {
      std::cout<<"Initializing ADF API..."<<std::endl;
#ifdef __EXCLUDE_PL_CONTROL__
      bool exclude_pl_control = true;
#else
      bool exclude_pl_control = false;
#endif
      adf::initializeConfigurations(nullptr, 0, 0, 0,
                                    GraphConfigurations, NUM_GRAPH,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    PLIOConfigurations, NUM_PLIO,
                                    nullptr, 0, 0, nullptr,
                                    false, exclude_pl_control, false, nullptr,
                                    true, 2);

    }
  } initAIEControlXRT;



#if !defined(__CDO__)

// Kernel Stub Definition
template<> void xf::dsp::aie::fir::decimate_asym::fir_decimate_asym<cint16, short, 8, 2, 15, 0, 1024, false, false, 8, 0, 1, 0, 1, 0, 0>::filter(input_window<cint16> *,output_window<cint16> *) { /* Stub */ } 
#endif
